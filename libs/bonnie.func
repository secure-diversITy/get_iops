# doing the bonnie stuff
F_BONNIE(){
    BATCH=$1
    [ "$SKIPWARN" == "y" ] && BATCH=1
    if [ "x$BATCH" == "x0" ];then
        clear
        # bonnie++ disclaimer
        echo -e "\nDISCLAIMER:\n"
        echo "  First of all: bonnie++ itself can **NOT** display IOPS(!)."
        echo "  Most people use it to catch 'Random seeks' which is not the same as IOPS."
        echo
        echo "  The results of bonnie++ are an indicator only! This means the results are not hard"
        echo "  facts! You can have 800 Random Seeks as a result and everything is working as expected"
        echo "  but you can also have 1500 Random Seeks and still having I/O problems!"
        echo
        echo "  Some words to the splunk>'ers:"
        echo "  The way bonnie++ is testing is not exactly the same way splunk> operates."
        echo "  For example sequential and random access is not measured with bonnie++ and"
        echo "  there are dozens of caches playing a role (e.g. raid controller, OS, ...)" 
        echo
        echo "  .. anyways using bonnie++ will get you a feeling about your storage setup."
        echo "  Just keep that in mind when using bonnie++ and/or this helper script."
        echo
        echo "  When you have less than 1000 Random Seeks:"
        echo "  - don't panic that just means you need to do more tests"
        echo "  - you can always take a look on the bonnie++ options to change its behaviour"
        echo "  - restart this script and try another IOPS tester"
        echo
        echo "*************************************************************************************"
        echo " I UNDERSTOOD BONNIE's BEHAVIOUR AND STILL WANT TO PROCEED:"    
    
        read -p "[y|n] > " ANSW
        if [ "$ANSW" != "y" ];then
            echo "aborted as requested."
            exit
        fi        
    fi

    F_SETUP bonnie++

    # set defaults if required
    [ -z "$TESTS" -o "$TESTS" == "default" ]&& TESTS="$BONTESTRUNSDEF"
    [ -z "$NFILES" -o "$NFILES" == "default" ]&& NFILES="$BONFILESNODEF"
    [ -z "$NDIRS" -o "$NDIRS" == "default" ]&& NDIRS="$BONDIRSNODEF"

    # check if we would have enough free inodes first:
    FREEIN=$(df --output=iavail "$STORAGE" |grep -Eo "[[:digit:]]+")
    if [ -z "$FREEIN" ];then
        echo -e "\n\tABORTED! Cannot determine free inodes ($FREEIN)!\n"
        exit 3
    else
        # calculate the real used inodes (bonnie++ will multiply the given value with 1024):
        BONINODES=$((${NFILES}*1024))
        
        # compare the free inodes of the filesystem with the one we about to use:
        INODESFREE=$(($FREEIN - $BONINODES))
        
        echo -e "\tCurrently free inodes:\t$FREEIN"
        echo -e "\t... we would use:\t$BONINODES"
        echo -e "\t... leaving this free inodes:\t$INODESFREE"
        
        if [ "$INODESFREE" -lt 10000 ];then
            echo -e "\n\tABORTED! Not enough free inodes!\n"
            echo -e "\tIn order to not running into problem we abort here.\n"
            echo -e "\nRestart and choose less than $NFILES at 'Number of files getting written'"
            exit 3
        fi
    fi

    echo -e "\nstarting with:"
    echo -e "\tstorage: $STORAGE"
    echo -e "\tfile size: ${BSIZE}m"
    echo -e "\ttests: $TESTS"
    echo -e "\tnfiles: $NFILES"
    echo -e "\tndirs: $NDIRS"
    echo -e "\tbsize: $BSIZE"
    echo -e "\tresult: $CSV"

    # as bonnie++ is not able to display IOPS directly many referring to "random seeks" here instead.
    # additionally we will do an "iostat" while bonnie++ is running which will show the IOPS during the
    # bonnie++ run
    $IOSTATBIN $STORAGE 1 > ${CSV}.iops &
    IOSTATPID="$!"

    # -b no write buffering
    # -n "number:max:min:num-directories:chunk-size":
    # max is the maximum size and min is the minimum size (both default to 0 if not specified). If minimum and maximum  sizes  are  specified
    # then  every  file  will  have a random size from the range min..max inclusive.  If you specify a number of directories then the files will be
    # evenly distributed amoung that many sub-directories
    $BINARGS $BONBIN -u $RUNUSER -x $TESTS -d $STORAGE -s ${BSIZE}m -r ${RAM}m -b -n ${NFILES}:${BSIZE}:8:${NDIRS} >> $CSV
    kill $IOSTATPID || echo "ERROR: can't stop '$IOSTATBIN' ($OSTATPID), please kill it manually"
    echo -e "\n\nSummary (Random Seeks is what you are interested in):\n"
    cat $CSV | bon_csv2txt
    cat $CSV | bon_csv2html > ${CSV}.htm && echo -e "\nThe above has been saved also in human readable HTML here: ${CSV}.htm"
    [ "$RUNUSER" != "root" -a $(id -u) -eq 0 ] && chown $RUNUSER ${CSV} ${CSV}.htm ${CSV}.iops
}

