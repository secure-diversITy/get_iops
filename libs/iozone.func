# doing the iozone stuff
F_IOZONE(){
    F_SETUP iozone

    # set defaults if required
    [ -z "$RSIZES" -o "$RSIZES" == "default" ]&& RSIZES="$IOZRSIZESDEF"
    [ -z "$TESTS" -o "$TESTS" == "default" ]&& TESTS="$IOZTESTSDEF"
    [ -z "$CPUCOUNT" ] && CPUCOUNT="$IOZCPUCNTDEF"
    [ "$CPUCOUNT" == "auto" ] && CPUCOUNT="$DETCPUCOUNT"

    # prep
    IOZR=$(for r in $RSIZES;do echo "-r $r" ;done | tr '\n' ' ')
    IOZT=$(for t in $TESTS;do echo "-i $t" ;done | tr '\n' ' ')
    IOZC=$(while [ "$CPUCOUNT" -ne 0 ];do echo "-F $STORAGE/${TYPE}.test.${CPUCOUNT}"; CPUCOUNT=$((CPUCOUNT - 1)) ;done | tr '\n' ' ')

    echo -e "\nstarting with:" 
    echo -e "\tstorage: $STORAGE"
    echo -e "\tfile size: ${BSIZE}m"
    echo -e "\trecord sizes: ${RSIZES}"
    echo -e "\ttests: $TESTS"
    echo -e "\tresult: $CSV"
    F_LOG "starting variables:\nstorage: $STORAGE\nfile size: ${BSIZE}\ntests: $TESTS\nrsizes: $RSIZES\nresult: $CSV\nout: $OUT\nxls: ${CSV}.xls"

    # iozone for splunk: http://docs.splunk.com/Documentation/PCI/2.1.1/Install/Troubleshooting#Measuring_system_performance
    # -I try to bypass caches (not available on all platforms)
    # -K Inject some random accesses in the testing
    # -i tests to run (see help)
    # -f path to test
    # -s file size
    # -r record sizes
    $BINARGS $IZBIN -I -K $IOZT -f $STORAGE/${TYPE}.test -s ${BSIZE}m $IOZR -O -b $CSV 2>&1 | $BINARGS tee -a ${OUT}
    clear
    $BINARGS $IZBIN -t1 -I -K $IOZT $IOZC -s ${BSIZE}m -O -b ${CSV}.xls 2>&1 | $BINARGS tee -a ${OUT}
    clear
    echo -e "\n\nSummary:\n"
    grep "Output is in ops/sec" -A25 ${OUT}
}
